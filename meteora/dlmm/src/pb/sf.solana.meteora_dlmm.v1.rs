// This file is @generated by prost-build.
/// Main instructions container
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instructions {
    #[prost(message, repeated, tag = "1")]
    pub instructions: ::prost::alloc::vec::Vec<Meta>,
}
/// Metadata for an instruction
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Meta {
    #[prost(string, tag = "1")]
    pub tx_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub block_slot: u64,
    #[prost(int64, tag = "3")]
    pub block_time: i64,
    #[prost(string, tag = "4")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub instruction_index: u32,
    #[prost(bool, tag = "6")]
    pub is_inner_instruction: bool,
    #[prost(uint32, optional, tag = "7")]
    pub inner_instruction_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub signer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub outer_program: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "10")]
    pub instruction_type: ::prost::alloc::string::String,
    /// Map of account roles to their addresses, key is role name, value is account address
    #[prost(map = "string, string", tag = "14")]
    pub input_accounts: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Instruction data
    #[prost(message, optional, tag = "12")]
    pub args: ::core::option::Option<InstructionArgs>,
}
/// Flattened args for easy querying
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlatArg {
    #[prost(int32, optional, tag = "1")]
    pub tick_spacing: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub index: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub trade_fee_rate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub protocol_fee_rate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub fund_fee_rate: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "6")]
    pub param: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "7")]
    pub value: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub sqrt_price_x64: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "9")]
    pub open_time: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "10")]
    pub status: ::core::option::Option<u32>,
    #[prost(string, repeated, tag = "11")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub new_owner: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "13")]
    pub params: ::prost::alloc::vec::Vec<PbInitializeRewardParam>,
    #[prost(uint32, optional, tag = "14")]
    pub reward_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub emissions_per_second_x64: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "16")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "17")]
    pub amount0_requested: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub amount1_requested: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "19")]
    pub tick_lower_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub tick_upper_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub tick_array_lower_start_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "22")]
    pub tick_array_upper_start_index: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "23")]
    pub liquidity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "24")]
    pub amount0_max: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub amount1_max: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub with_metadata: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "27")]
    pub liquidity_amount: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "28")]
    pub amount0_min: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "29")]
    pub amount1_min: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "30")]
    pub is_base_input: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "31")]
    pub amount_specified: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "32")]
    pub amount_limit: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub sqrt_price_limit_x64: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "34")]
    pub is_base_input_v2: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "35")]
    pub amount_specified_v2: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "36")]
    pub other_amount_threshold: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "37")]
    pub sqrt_price_limit_x64_v2: ::core::option::Option<u64>,
}
/// Main instruction arguments structure
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionArgs {
    #[prost(
        oneof = "instruction_args::InstructionArgs",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"
    )]
    pub instruction_args: ::core::option::Option<instruction_args::InstructionArgs>,
}
/// Nested message and enum types in `InstructionArgs`.
pub mod instruction_args {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InstructionArgs {
        /// Core pool operations
        #[prost(message, tag = "1")]
        CreatePool(super::PbCreatePoolLayout),
        #[prost(message, tag = "2")]
        InitializeTickArray(super::PbInitializeTickArrayLayout),
        #[prost(message, tag = "3")]
        CreatePosition(super::PbCreatePositionLayout),
        #[prost(message, tag = "4")]
        ClosePosition(super::PbClosePositionLayout),
        #[prost(message, tag = "5")]
        Swap(super::PbSwapLayout),
        #[prost(message, tag = "6")]
        SwapRouterBaseIn(super::PbSwapRouterBaseInLayout),
        #[prost(message, tag = "7")]
        InitializeReward(super::PbInitializeRewardLayout),
        #[prost(message, tag = "8")]
        SetRewardEmissions(super::PbSetRewardEmissionsLayout),
        #[prost(message, tag = "9")]
        CollectReward(super::PbCollectRewardLayout),
        #[prost(message, tag = "10")]
        CollectFees(super::PbCollectFeesLayout),
        #[prost(message, tag = "11")]
        TransferPositionOwner(super::PbTransferPositionOwnerLayout),
        #[prost(message, tag = "12")]
        UpdateFees(super::PbUpdateFeesLayout),
        #[prost(message, tag = "13")]
        AddLiquidity(super::PbAddLiquidityLayout),
        #[prost(message, tag = "14")]
        RemoveLiquidity(super::PbRemoveLiquidityLayout),
        #[prost(message, tag = "15")]
        InitializeConfig(super::PbInitializeConfigLayout),
        #[prost(message, tag = "16")]
        UpdateConfig(super::PbUpdateConfigLayout),
        /// Additional Meteora-specific instruction layouts
        #[prost(message, tag = "17")]
        InitializeLbPair(super::PbInitializeLbPairLayout),
        #[prost(message, tag = "18")]
        InitializePermissionLbPair(super::PbInitializePermissionLbPairLayout),
        #[prost(message, tag = "19")]
        InitializePosition(super::PbInitializePositionLayout),
        #[prost(message, tag = "20")]
        InitializePositionPda(super::PbInitializePositionPdaLayout),
        #[prost(message, tag = "21")]
        SwapWithPriceImpact(super::PbSwapWithPriceImpactLayout),
        #[prost(message, tag = "22")]
        SwapExactOut(super::PbSwapExactOutLayout),
    }
}
/// Common types
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbPubKey {
    #[prost(string, tag = "1")]
    pub pubkey: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInt128 {
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
/// Instruction specific layouts
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeRewardParam {
    #[prost(string, tag = "1")]
    pub mint: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub vault: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub emissions_per_second_x64: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub open_time: u64,
    #[prost(uint64, tag = "6")]
    pub end_time: u64,
}
/// Meteora DLMM specific layouts
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreatePoolLayout {
    #[prost(string, tag = "1")]
    pub token_mint_a: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub token_mint_b: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub tick_spacing: i32,
    #[prost(string, tag = "4")]
    pub initial_sqrt_price_x64: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeTickArrayLayout {
    #[prost(int32, tag = "1")]
    pub start_tick_index: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreatePositionLayout {
    #[prost(int32, tag = "1")]
    pub tick_lower_index: i32,
    #[prost(int32, tag = "2")]
    pub tick_upper_index: i32,
    #[prost(string, tag = "3")]
    pub liquidity_amount: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub token_max_a: u64,
    #[prost(uint64, tag = "5")]
    pub token_max_b: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePositionLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwapLayout {
    #[prost(string, tag = "1")]
    pub amount_in: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub min_amount_out: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapRouterBaseInLayout {
    #[prost(uint64, tag = "1")]
    pub amount_in: u64,
    #[prost(uint64, tag = "2")]
    pub amount_out_min: u64,
    #[prost(uint64, tag = "3")]
    pub sqrt_price_limit_x64: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeRewardLayout {
    #[prost(string, tag = "1")]
    pub emissions_per_second_x64: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub open_time: u64,
    #[prost(uint64, tag = "3")]
    pub end_time: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSetRewardEmissionsLayout {
    #[prost(uint32, tag = "1")]
    pub reward_index: u32,
    #[prost(string, tag = "2")]
    pub emissions_per_second_x64: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub open_time: u64,
    #[prost(uint64, tag = "4")]
    pub end_time: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbCollectRewardLayout {
    #[prost(uint32, tag = "1")]
    pub reward_index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbCollectFeesLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbTransferPositionOwnerLayout {
    #[prost(string, tag = "1")]
    pub new_owner: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeesLayout {
    #[prost(uint64, tag = "1")]
    pub trade_fee_rate: u64,
    #[prost(uint64, tag = "2")]
    pub protocol_fee_rate: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityLayout {
    #[prost(int32, tag = "1")]
    pub tick_lower_index: i32,
    #[prost(int32, tag = "2")]
    pub tick_upper_index: i32,
    #[prost(string, tag = "3")]
    pub liquidity_amount: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub token_max_a: u64,
    #[prost(uint64, tag = "5")]
    pub token_max_b: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidityLayout {
    #[prost(int32, tag = "1")]
    pub tick_lower_index: i32,
    #[prost(int32, tag = "2")]
    pub tick_upper_index: i32,
    #[prost(string, tag = "3")]
    pub liquidity_amount: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub token_min_a: u64,
    #[prost(uint64, tag = "5")]
    pub token_min_b: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeConfigLayout {
    #[prost(uint64, tag = "1")]
    pub trade_fee_rate: u64,
    #[prost(uint64, tag = "2")]
    pub protocol_fee_rate: u64,
    #[prost(uint64, tag = "3")]
    pub tick_spacing: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateConfigLayout {
    #[prost(uint32, tag = "1")]
    pub param: u32,
    #[prost(uint64, tag = "2")]
    pub value: u64,
}
/// New message definitions for Meteora-specific layouts
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeLbPairLayout {
    #[prost(int32, tag = "1")]
    pub active_id: i32,
    #[prost(int32, tag = "2")]
    pub bin_step: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePermissionLbPairLayout {
    #[prost(int32, tag = "1")]
    pub active_id: i32,
    #[prost(int32, tag = "2")]
    pub bin_step: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePositionLayout {
    #[prost(int32, tag = "1")]
    pub lower_bin_id: i32,
    #[prost(int32, tag = "2")]
    pub width: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePositionPdaLayout {
    #[prost(int32, tag = "1")]
    pub lower_bin_id: i32,
    #[prost(int32, tag = "2")]
    pub width: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapWithPriceImpactLayout {
    #[prost(uint64, tag = "1")]
    pub amount_in: u64,
    #[prost(int32, tag = "2")]
    pub active_id: i32,
    #[prost(int32, tag = "3")]
    pub max_price_impact_bps: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapExactOutLayout {
    #[prost(uint64, tag = "1")]
    pub max_in_amount: u64,
    #[prost(uint64, tag = "2")]
    pub out_amount: u64,
}
